-module($MODULENAME).
-behaviour(gen_server).
-vsn(0).

%% Public API
-export([start_link/0]).

%% OTP gen_server Callbacks
-export([init/1,
         handle_call/3,
         handle_cast/2,
         handle_info/2,
         terminate/2,
         code_change/3]).

%%%-------------------------------------------------------------------
%%% Types & Macros
%%%-------------------------------------------------------------------

-record(state, {}).

%%%-------------------------------------------------------------------
%%% Public API
%%%-------------------------------------------------------------------

%% @doc
%% Starts the server.
%% @end
-spec start_link() -> Reply when
    Reply :: {ok, pid()} |
             ignore |
             {error, Reason},
    Reason :: term().

start_link() ->
    gen_server:start_link({local, ?MODULE}, ?MODULE, [], []).

%%%-------------------------------------------------------------------
%%% OTP gen_server callbacks
%%%-------------------------------------------------------------------

%% @private
%% @doc
%% Initializes the server.
%% @end
-spec init(Args) -> Result when
    Args :: term(),
    Result :: {ok, State} | {ok, State, Timeout} |
              {ok, State, hibernate} |
              ignore | {stop, Reason},
    State :: term(),
    Timeout :: pos_integer() | infinity,
    Reason :: term().

init([]) ->
    {ok, #state{}}.

%% @private
%% @doc
%% Handling call messages.
%% @end
-spec handle_call(Request, From, State) -> Result when
    Request :: term(),
    From :: {pid(), Tag},
    Tag :: term(),
    State :: term(),
    Result :: {reply, Reply, NewState} | {reply, Reply, NewState, Timeout} |
              {noreply, NewState} | {noreply, NewState, Timeout} |
              {noreply, NewState, hibernate} |
              {stop, Reason, Reply, NewState} | {stop, Reason, NewState},
    Reply :: term(),
    NewState :: term(),
    Timeout :: pos_integer() | infinity,
    Reason :: term().

handle_call(_Request, _From, State) ->
    Reply = ok,
    {reply, Reply, State}.

%% @private
%% @doc
%% Handling cast messages.
%% @end
-spec handle_cast(Request, State) -> Result when
    Request :: term(),
    State :: term(),
    Result :: {noreply, NewState} | {noreply, NewState, Timeout} |
              {noreply, NewState, hibernate} |
              {stop, Reason, NewState},
    NewState :: term(),
    Timeout :: pos_integer() | infinity,
    Reason :: term().

handle_cast(_Msg, State) ->
    {noreply, State}.

%% @private
%% @doc
%% Handling all non call/cast messages.
%% @end
-spec handle_info(Info, State) -> Result when
    Info :: term(),
    State :: term(),
    Result :: {noreply, NewState} | {noreply, NewState, Timeout} |
              {noreply, NewState, hibernate} |
              {stop, Reason, NewState},
    NewState :: term(),
    Timeout :: pos_integer() | infinity,
    Reason :: term().

handle_info(_Info, State) ->
    {noreply, State}.

%% @private
%% @doc
%% This function is called by a gen_server when it is about to
%% terminate. It should be the opposite of Module:init/1 and do any
%% necessary cleaning up. When it returns, the gen_server terminates
%% with Reason. The return value is ignored.
%% @end
-spec terminate(Reason, State) -> no_return() when
    Reason :: normal | shutdown | {shutdown, term()} | term(),
    State :: term().

terminate(_Reason, _State) ->
    ok.

%% @private
%% @doc
%% Convert process state when code is changed
%% @end
-spec code_change(OldVsn, State, Extra) -> Result when
    OldVsn :: Vsn | {down, Vsn},
    Vsn :: term(),
    State :: term(),
    Extra :: term(),
    Result :: {ok, NewState} | {error, Reason},
    NewState :: term(),
    Reason :: term().

code_change(_OldVsn, State, _Extra) ->
    {ok, State}.

%%%-------------------------------------------------------------------
%%% Internal Functions
%%%-------------------------------------------------------------------
